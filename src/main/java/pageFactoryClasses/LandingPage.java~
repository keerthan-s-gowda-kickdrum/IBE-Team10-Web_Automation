package pageFactoryClasses;
import org.openqa.selenium.*;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.time.Duration;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Arrays;
public class LandingPage {

    private static final org.apache.logging.log4j.Logger logger = org.apache.logging.log4j.LogManager.getLogger(LandingPage.class);

    @FindBy(css = "img[alt*='banner'], img[alt*='hero'], .banner-image, .hero-image, .header-image, header img, main img")
    private List<WebElement> bannerImages;

    @FindBy(css = ".spinner-container")
    private WebElement spinner;

    @FindBy(xpath = "//header[@class='header']")
    private WebElement Header;

    @FindBy(css = "[type='button'].search__button")
    private WebElement propertyButton;

    @FindBy(css = ".search__dropdown-menu")
    private WebElement propertyDropdownMenu;

    @FindBy(css = "[data-testid='date-range'], .date-picker-trigger, .date-input")
    private WebElement dateRangeField;



    private WebDriver driver;
    private JavascriptExecutor js;
    private WebDriverWait wait;

    public LandingPage(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(20));
        this.js = (JavascriptExecutor) driver;
        PageFactory.initElements(driver, this);
    }

    private void waitForSpinnerToDisappear() {
        try {
            wait.until(ExpectedConditions.invisibilityOfElementLocated(By.cssSelector(".spinner-container")));
        } catch (TimeoutException | NoSuchElementException e) {
            // Spinner might not be present, which is fine
        }
    }
    public WebElement getBannerImage() {
        waitForSpinnerToDisappear();
        wait.until(ExpectedConditions.presenceOfElementLocated(
                By.cssSelector("img[alt*='banner'], img[alt*='hero'], .banner-image, .hero-image, .header-image, header img, main img")
        ));

        // Log all images found on the page for debugging
        List<WebElement> allImages = driver.findElements(By.tagName("img"));
        for (WebElement img : allImages) {
            try {
                System.out.println("Found image with src: " + img.getAttribute("src") +
                        ", alt: " + img.getAttribute("alt") +
                        ", class: " + img.getAttribute("class"));
            } catch (StaleElementReferenceException e) {
                // Handle stale element
                continue;
            }
        }

        // Return the first visible banner image
        for (WebElement image : bannerImages) {
            try {
                if (image.isDisplayed()) {
                    return image;
                }
            } catch (StaleElementReferenceException e) {
                PageFactory.initElements(driver, this);
                continue;
            }
        }

        throw new NoSuchElementException("No visible banner image found on the page");
    }

    public void selectProperty(String propertyName) {
        waitForSpinnerToDisappear();
        try {
            // Click the dropdown button to open it
            wait.until(ExpectedConditions.elementToBeClickable(propertyButton)).click();

            // Wait for the dropdown menu to appear
            wait.until(ExpectedConditions.presenceOfElementLocated(By.className("property-dropdown")));

            // Find the property item by its text content
            By propertyOption = By.xpath(
                    String.format("//div[contains(@class, 'search__dropdown-item') and contains(text(), '%s')]", propertyName)
            );

            // Click the property item
            WebElement option = wait.until(ExpectedConditions.elementToBeClickable(propertyOption));
            option.click();
        } catch (Exception e) {
            System.out.println("Current page source during property selection: " + driver.getPageSource());
            throw e;
        }
    }

    public void clickDateRangeField() {
        waitForSpinnerToDisappear();
        wait.until(ExpectedConditions.elementToBeClickable(dateRangeField)).click();
    }
    




}

